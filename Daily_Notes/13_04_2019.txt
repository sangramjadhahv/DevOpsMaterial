
================================ Ansible Continue ==================


In Playbook :- 

Vars used for string substitution

- vars_files: - This is like import statement

------------------------------------
Ansible Variable Files

---
- hosts: server  #group name from the inventory
  become: true

  vars:
    pack_name: httpd

  vars_files:
    - web_vars.yml

  tasks:
    - name: Install {{ pack_name }}
      yum: pkg={{ pack_name }} state=installed
    - name: Start {{ serv_name }}
      service: name={{ serv_name }} state=started



Note:-  Here serv_name is variable present in different file i.e web_vars.yml

become: true   >>> execute as sudo

Note : 

/etc/ansible/hosts      >>>> is the default entry 

[server]
this name should be present in hosts section in ansible program

State=installed and state=present ..both are same






Output:- 


[root@ip-172-31-16-103 anisble-demo]# ansible-playbook Ansible_Varible_Files.yml

PLAY [server] **********************************************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************************************
ok: [172.31.19.1]

TASK [Install httpd] ***************************************************************************************************************************************************
ok: [172.31.19.1]

TASK [Start httpd] *****************************************************************************************************************************************************
changed: [172.31.19.1]

PLAY RECAP *************************************************************************************************************************************************************
172.31.19.1                : ok=3    changed=1    unreachable=0    failed=0

[root@ip-172-31-16-103 anisble-demo]#




===========================================================




============================================ 

Use Case :  install webserver and static web page on it. We will copy files, change owner, change group, check file copied ot not 


package : this is top..means it will bydefault use either yum (for red hat) or apt-get (for ubuntu). 

copy : it is module to copy from controller to client

Stat : this is module to check file is present or not

register : this will copy output of its above command and store it in some variable.






Start now: -

nginx - to istall this will first make sure httpd service is stoped in client . go to client manually and stop httpd service - 
service httpd stop

On Conroller :- 


[root@ip-172-31-16-103 DevOpsMaterial]# cd anisble-demo

[root@ip-172-31-16-103 anisble-demo]# mkdir nginx-demo

[root@ip-172-31-16-103 anisble-demo]# cd nginx-demo

[root@ip-172-31-16-103 nginx-demo]#

[root@ip-172-31-16-103 nginx-demo]# pwd
/opt/DevOpsMaterial/anisble-demo/nginx-demo


Directory structure :-  See notebook notes .

nginx-demo
>install-nginx.yml


========== Below is code for all:- 


=====================================================

----install-nginx.yml-------------------------
---
- hosts: server
  # become root (using sudo, by default)
  become: yes
  tasks:
    - name: Install nginx.
      # the 'package' module is new, and abstracts things like 'yum' 'apt,' and 'pkg' away
      package: name={{ item }} state=present
      # iterates over items
      with_items:
        - nginx
        # superfluous, should be split into a separate playbook
        #- vim
        - nano
        - sshguard
        - curl

    - name: Create website directory
      file: path=/var/www/mywebsite state=directory mode=0755

    - name: Copy nginx config files (main config and vhost config)
      # copy FROM ansible controller to target machine (fetch is the opposite)
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      # more complex iteration: each item now has src: and dest: attributes
      with_items:
        - src: "config/nginx.conf"
          dest: "/etc/nginx/nginx.conf"
        - src: "config/mywebsite.conf"
          dest: "/etc/nginx/conf.d/mywebsite.conf"
        - src: "config/index.html"
          dest: "/var/www/mywebsite/index.html"

    - name: Check if default nginx vhost still exists
      stat: path=/etc/nginx/sites-enabled/default
      register: default_conf

    - name: Remove default nginx vhost configuration
      file: path=/etc/nginx/sites-enabled/default state=absent
      when: default_conf.stat.exists

    - name: Start nginx at boot + make sure it's running right now.
      service: name=nginx state=restarted enabled=yes
	  
	  
----config/nginx.conf------------------
user  www-data;
worker_processes  auto;

pid /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    error_log  /var/log/nginx_error.log error;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # SSL
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # no sslv3 (poodle etc.)
    ssl_prefer_server_ciphers on;

    # Gzip Settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_min_length 512;
    gzip_types text/plain text/html application/x-javascript text/javascript application/javascript text/xml text/css application/font-sfnt;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}

-----------------config/mywebsite.conf----------------------
server {
    listen       80;
    server_name  $IPADDR;

    client_max_body_size 20m;

    index index.php index.html index.htm;
    root   /var/www/mywebsite;

    location / {
        try_files $uri $uri/ /index.html?q=$uri&$args;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|woff|ttf|svg|otf)$ {
            expires 30d;
            add_header Pragma public;
            add_header Cache-Control "public";
            access_log off;
    }
}


---------------------config/index.html----------------------------
<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="description" content="Ansible Overview">
  <title>Hope.</title>
</head>

<style type="text/css">
    body {
      font-size: 16pt;
      width: 40em;
      line-spacing: 1.3em;
      margin: auto;
      padding: 2em 3em;
    }
    #content {
        border-left: 2px solid black;
    }
</style>

<body>
  <h1>The hope of Ansible.</h1>

  <div id="content">
      <p>A strong hope; a beautiful hope.</p>

      <p>I <strong>really</strong> hope you configured this server and deployed this website with Ansible, because as this project grows, it will become more and more complicated, and burn you with the fire of a thousand suns if you try to keep using bash for a level of complexity and abstraction that it wasn't designed for.</p>

      <p>Oh, how we laugh, we lucky survivors of the bash/Perl era. How we laugh, desperately, with tears in our eyes, seeking understanding for all the horror we've seen.</p>

    </div>
        body {
      font-size: 16pt;
      width: 40em;
      line-spacing: 1.3em;
      margin: auto;
      padding: 2em 3em;
    }
    #content {
        border-left: 2px solid black;
    }
</style>

<body>
  <h1>The hope of Ansible.</h1>

  <div id="content">
      <p>A strong hope; a beautiful hope.</p>

      <p>I <strong>really</strong> hope you configured this server and deployed this website with Ansible, because as this project grows, it will become more and more complicated, and burn you with the fire of a thousand suns if you try to keep using bash for a level of complexity and abstraction that it wasn't designed for.</p>

      <p>Oh, how we laugh, we lucky survivors of the bash/Perl era. How we laugh, desperately, with tears in our eyes, seeking understanding for all the horror we've seen.</p>

    </div>
    
</body>
</html>



========================

Note :- 

We can bypass errors wherever required. i.e if certain files or things are not neccessary and can be skip to continue Automation, then we can use

ignore_errors: yes


Error resolvation : 

As we are unbale to run above program , giving below error


[root@ip-172-31-16-103 nginx-demo]# ansible-playbook install-nginx.yml

PLAY [server] **********************************************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************************************
ok: [172.31.19.1]

TASK [Install nginx.] **************************************************************************************************************************************************
failed: [172.31.19.1] (item=nginx) => {"changed": false, "item": "nginx", "msg": "No package matching 'nginx' found available, installed or updated", "rc": 126, "results": ["No package matching 'nginx' found available, installed or updated"]}
changed: [172.31.19.1] => (item=nano)
failed: [172.31.19.1] (item=sshguard) => {"changed": false, "item": "sshguard", "msg": "No package matching 'sshguard' found available, installed or updated", "rc": 126, "results": ["No package matching 'sshguard' found available, installed or updated"]}
ok: [172.31.19.1] => (item=curl)
        to retry, use: --limit @/opt/DevOpsMaterial/anisble-demo/nginx-demo/install-nginx.retry

PLAY RECAP *************************************************************************************************************************************************************
172.31.19.1                : ok=1    changed=0    unreachable=0    failed=1






- So for this we we do below things to update repo on client machine. We will add below in tasks

yum install wget

wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

yum install epel-release-latest-7.noarch.rpm



- Also comment sshguard from list in install-nginx.yml file. As sshguard is not available in Redhat repo and we are using Redhat machines for current demo for Ansible controller and client.


- also add in nginx.conf
first line

user  root;


- change stat path

   - name: Check if default nginx vhost still exists
      stat: path=/etc/nginx/conf.d/default.conf
      register: default_conf

    - name: Remove default nginx vhost configuration
      file: path=/etc/nginx/conf.d/default.conf state=absent






